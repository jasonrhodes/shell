#!/bin/bash
# Create a new virtual host in one simple step
#
# sudo newvhost local.mysite.com

# Check for root, borrowed from the much better virtualhost.sh script
# See: https://github.com/pgib/virtualhost.sh/blob/master/virtualhost.sh
# Or run $ brew install virtualhost.sh

if [ `whoami` != 'root' ]
then
  echo "newvhost requires super-user privileges to work."
  echo "Please run again as 'sudo newvhost [virtual host name]"
  exit 0
fi

URL=$1
DOCROOT=$URL
FILE=/etc/apache2/extra/httpd-vhosts.conf
HOSTS=/etc/hosts
VHOSTS_PATH=~/vhosts

if [ $# -gt 1 ]
then
  DOCROOT="$URL/$2"
fi

# Create the vhosts directory if it doesn't yet exist
cd $VHOSTS_PATH || ( mkdir $VHOSTS_PATH && echo "Created ${VHOSTS_PATH} directory" )

# Create virtual host listing in httpd config
echo -e "\n" >> $FILE
echo "<VirtualHost *:80>" >> $FILE
echo "  ServerName ${URL}" >> $FILE
echo "  DocumentRoot ${VHOSTS_PATH}/${URL}" >> $FILE
echo "  <Directory ${VHOSTS_PATH}/${URL}>" >> $FILE
echo "    Options All" >> $FILE
echo "    AllowOverride All" >> $FILE
echo "    Order allow,deny" >> $FILE
echo "    Allow from all" >> $FILE
echo "  </Directory>" >> $FILE
echo "  ErrorLog \"${VHOSTS_PATH}/logs/${URL}_error_log\"" >> $FILE
echo "  CustomLog \"${VHOSTS_PATH}/logs/${URL}_access_log\" common" >> $FILE
echo "</VirtualHost>" >> $FILE

# Add listing to hosts file
echo "127.0.0.1    ${URL}" >> $HOSTS

# Make directory, if necessary
if [ ! -d $VHOSTS_PATH/$DOCROOT ]
then
  mkdir -p $VHOSTS_PATH/$DOCROOT
  echo "Directory created at $VHOSTS_PATH/$DOCROOT"
  touch $VHOSTS_PATH/$DOCROOT/index.html
  echo "This is ${URL}" > $VHOSTS_PATH/$DOCROOT/index.html
  chown -R $SUDO_USER $VHOSTS_PATH/$URL
  chmod -R 0777 $VHOSTS_PATH/$URL
fi

# If editor commands exist, open as a new project
( which subl && subl $VHOSTS_PATH/$URL ) || ( which coda && coda $VHOSTS_PATH/$URL ) || ( which mate && mate $VHOSTS_PATH/$URL ) >/dev/null 2>&1

echo "You created a new virtual host at http://$URL"

# Restart Apache, then open the new URL to verify it works
sudo apachectl restart && ( open -a /Applications/Google\ Chrome.app http://$URL || open http://$URL ) >/dev/null 2>&1